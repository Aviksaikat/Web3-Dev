Challenge: "Transaction Malleability"

Description: In this challenge, you need to find a vulnerability related to "Transaction Malleability". In Ethereum, transactions are identified by a unique hash, but due to the nature of ECDSA signatures, it is possible to modify the signature data in such a way that the transaction hash remains the same, but the transaction contents are changed. This can result in various issues such as funds being sent to the wrong address, or a smart contract behaving unexpectedly.

Objective: The objective of this challenge is to find a way to modify a transaction's signature data in a way that the transaction hash remains the same but the transaction contents are changed. You can use any tools or techniques you like to achieve this.

Note: Please do not attempt this challenge on any live Ethereum network without permission. Use a test network or a private network for testing purposes only.
As you can see, the transaction hash is generated by taking the RLP-encoded transaction data and hashing it using the Keccak-256 algorithm. This hash is then used to identify the transaction on the Ethereum network. However, due to the nature of ECDSA signatures, it is possible to modify the signature data in such a way that the transaction contents are changed but the hash remains the same.


Long story short -> generate 2 valid sigs for the same msg.